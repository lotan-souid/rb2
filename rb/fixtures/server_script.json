[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-24 12:07:50.552863",
  "module": "Development",
  "name": "Calculate Residential Area from Lots",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Development Project",
  "script": "# חישוב סך שטח המגרשים מהטופס Lot\n\nif doc.plan:\n    # חיפוש כל המגרשים השייכים לתוכנית\n    lots = frappe.db.sql(\"\"\"\n        SELECT SUM(area_sqm) as total_area, COUNT(*) as total_lots\n        FROM `tabLot` \n        WHERE plan = %s AND area_sqm IS NOT NULL AND area_sqm > 0\n    \"\"\", [doc.plan], as_dict=True)\n    \n    if lots and lots[0].total_area:\n        doc.residential_area_sqm = lots[0].total_area\n        doc.total_lots = lots[0].total_lots\n        \n    # חישוב מספר מגרשים למגורים (כל המגרשים בינתיים)\n    residential_lots = frappe.db.sql(\"\"\"\n        SELECT COUNT(*) as count \n        FROM `tabLot` \n        WHERE plan = %s\n    \"\"\", [doc.plan], as_dict=True)\n    \n    if residential_lots:\n        doc.residential_lots = residential_lots[0].count",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-24 12:56:33.680868",
  "module": "Development",
  "name": "Update Development Project on Lot Change",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Lot",
  "script": "# עדכון פרויקט הפיתוח כשמגרש משתנה\n\nif doc.plan:\n    # חיפוש פרויקט הפיתוח הקשור לתוכנית\n    development_projects = frappe.db.get_list(\"Development Project\", \n                                            filters={\"plan\": doc.plan},\n                                            fields=[\"name\"])\n    \n    # עדכון כל פרויקט פיתוח קשור\n    for project in development_projects:\n        dev_project = frappe.get_doc(\"Development Project\", project.name)\n        dev_project.save()  # זה יפעיל את הסקריפט של חישוב השטח",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-24 12:56:37.463439",
  "module": "Development",
  "name": "Update Lot Fields from Development Project",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Lot",
  "script": "# עדכון שדות במגרש מפרויקט הפיתוח\n\nif doc.plan:\n    # מציאת פרויקט הפיתוח המקושר לתוכנית\n    dev_project = frappe.db.get_value(\"Development Project\", \n                                     {\"plan\": doc.plan}, \n                                     [\"name\", \"status\", \"estimated_cost_per_sqm\"],\n                                     as_dict=True)\n    \n    if dev_project:\n        # עדכון שדות במגרש\n        doc.related_project = dev_project.name\n        doc.development_status = dev_project.status\n        doc.cost_per_sqm = dev_project.estimated_cost_per_sqm",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-24 22:58:28.115246",
  "module": "Planning",
  "name": "Auto Calculate Plan Lots Summary",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Lot",
  "script": "# Get the plan\nplan_name = doc.plan if hasattr(doc, 'plan') else None\nif plan_name:\n    # Get all lots for this plan\n    lots_data = frappe.db.sql(\"\"\"\n        SELECT \n            COUNT(*) as total_lots,\n            COALESCE(SUM(CASE WHEN area_sqm > 0 THEN 1 ELSE 0 END), 0) as residential_lots,\n            COALESCE(SUM(area_sqm), 0) as total_area_sqm,\n            COALESCE(SUM(CASE WHEN area_sqm > 0 THEN area_sqm ELSE 0 END), 0) as residential_area_sqm\n        FROM `tabLot` \n        WHERE plan = %s\n    \"\"\", (plan_name,), as_dict=True)\n    \n    if lots_data:\n        data = lots_data[0]\n        \n        # Update the Plan document\n        frappe.db.set_value('Plan', plan_name, {\n            'total_lots': data.get('total_lots', 0),\n            'residential_lots': data.get('residential_lots', 0), \n            'total_area_sqm': data.get('total_area_sqm', 0),\n            'residential_area_sqm': data.get('residential_area_sqm', 0)\n        })\n        \n        frappe.db.commit()\n        \n        # Also update any Development Project linked to this plan\n        dev_project = frappe.db.get_value('Development Project', {'plan': plan_name}, 'name')\n        \n        if dev_project:\n            # Get updated plan data\n            plan_data = frappe.get_doc('Plan', plan_name)\n            \n            # Update Development Project\n            frappe.db.set_value('Development Project', dev_project, {\n                'total_lots': plan_data.total_lots,\n                'residential_lots': plan_data.residential_lots,\n                'residential_area_sqm': plan_data.residential_area_sqm\n            })\n            \n            frappe.db.commit()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-24 14:50:44.091915",
  "module": null,
  "name": "Update Development Project from Plan",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Development Project",
  "script": "import frappe\n\ndef update_from_plan(doc, method=None):\n    \"\"\"Update Development Project with latest data from linked Plan before saving\"\"\"\n    \n    if doc.plan:\n        # Get Plan data\n        plan_doc = frappe.get_doc('Plan', doc.plan)\n        \n        # Update fields from Plan\n        doc.total_lots = plan_doc.get('total_lots', 0)\n        doc.residential_lots = plan_doc.get('residential_lots', 0) \n        doc.residential_area_sqm = plan_doc.get('residential_area_sqm', 0)\n\n# Execute the function\nupdate_from_plan(doc, method)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "initialize_plan_lots_summary",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-24 22:57:36.064533",
  "module": "Planning",
  "name": "Initialize Plan Lots Summary - One Time",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "def initialize_plan_lots_summary():\n    \"\"\"Initialize lots summary for all existing plans - run once\"\"\"\n    \n    # Get all plans\n    plans = frappe.get_all('Plan', fields=['name'])\n    \n    results = []\n    \n    for plan in plans:\n        plan_name = plan.name\n        \n        # Calculate totals for this plan\n        lots_data = frappe.db.sql(\"\"\"\n            SELECT \n                COUNT(*) as total_lots,\n                COALESCE(SUM(CASE WHEN area_sqm > 0 THEN 1 ELSE 0 END), 0) as residential_lots,\n                COALESCE(SUM(area_sqm), 0) as total_area_sqm,\n                COALESCE(SUM(CASE WHEN area_sqm > 0 THEN area_sqm ELSE 0 END), 0) as residential_area_sqm\n            FROM `tabLot` \n            WHERE plan = %s\n        \"\"\", (plan_name,), as_dict=True)\n        \n        if lots_data:\n            data = lots_data[0]\n            \n            # Update the Plan document\n            frappe.db.set_value('Plan', plan_name, {\n                'total_lots': data.get('total_lots', 0),\n                'residential_lots': data.get('residential_lots', 0), \n                'total_area_sqm': data.get('total_area_sqm', 0),\n                'residential_area_sqm': data.get('residential_area_sqm', 0)\n            })\n            \n            # Also update any Development Project linked to this plan\n            dev_project = frappe.db.get_value('Development Project', {'plan': plan_name}, 'name')\n            if dev_project:\n                frappe.db.set_value('Development Project', dev_project, {\n                    'total_lots': data.get('total_lots', 0),\n                    'residential_lots': data.get('residential_lots', 0),\n                    'residential_area_sqm': data.get('residential_area_sqm', 0)\n                })\n            \n            results.append({\n                'plan': plan_name,\n                'total_lots': data.get('total_lots', 0),\n                'residential_lots': data.get('residential_lots', 0),\n                'development_project': dev_project\n            })\n    \n    frappe.db.commit()\n    \n    return {\n        'message': 'Plan lots summary initialized successfully',\n        'plans_updated': len(results),\n        'results': results\n    }\n\n# Run the initialization\nresult = initialize_plan_lots_summary()\nfrappe.response['message'] = result",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "update_lot_prices",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-24 22:57:36.031840",
  "module": "Planning",
  "name": "update_lot_prices",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "import frappe\n\ndef update_lot_prices():\n    \"\"\"עדכון מחירי מגרשים בקבצי הסדרה\"\"\"\n    \n    # שליפת כל קבצי הסדרה עם מגרש מקושר\n    arrangement_files = frappe.get_all('Arrangement File', \n                                     filters={'assigned_lot': ['!=', None]},\n                                     fields=['name', 'assigned_lot', 'lot_price'])\n    \n    updated_count = 0\n    results = []\n    \n    for af in arrangement_files:\n        try:\n            # שליפת נתוני המגרש\n            lot = frappe.get_doc('Lot', af.assigned_lot)\n            \n            if lot.area_sqm and lot.cost_per_sqm and lot.cost_per_sqm > 0:\n                # חישוב מחיר חדש\n                new_price = lot.area_sqm * lot.cost_per_sqm\n                \n                # עדכון קובץ הסדרה\n                af_doc = frappe.get_doc('Arrangement File', af.name)\n                af_doc.lot_price = new_price\n                af_doc.lot_development_status = lot.development_status\n                af_doc.save()\n                \n                results.append({\n                    'arrangement_file': af.name,\n                    'lot': af.assigned_lot,\n                    'area_sqm': lot.area_sqm,\n                    'cost_per_sqm': lot.cost_per_sqm,\n                    'old_price': af.lot_price,\n                    'new_price': new_price,\n                    'development_status': lot.development_status,\n                    'status': 'updated'\n                })\n                updated_count += 1\n            else:\n                results.append({\n                    'arrangement_file': af.name,\n                    'lot': af.assigned_lot,\n                    'area_sqm': lot.area_sqm,\n                    'cost_per_sqm': lot.cost_per_sqm,\n                    'status': 'skipped - missing data'\n                })\n                \n        except Exception as e:\n            results.append({\n                'arrangement_file': af.name,\n                'lot': af.assigned_lot,\n                'status': f'error: {str(e)}'\n            })\n    \n    return {\n        'total_files': len(arrangement_files),\n        'updated': updated_count,\n        'results': results\n    }",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-24 17:19:58.266988",
  "module": "Planning",
  "name": "Set Lot ID from Lot Number and Plan",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Lot",
  "script": "# Server Script\n# Script Type: Document Event\n# Reference Doctype: Lot\n# Event: before_save\n\nif doc.lot_number and doc.plan_number:\n    doc.lot_id = f\"{doc.lot_number}@{doc.plan_number}\"\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-31 12:50:00.118216",
  "module": "Development",
  "name": "Calculate nested fields in Development Task",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Development Task",
  "script": "# התחלה - רק אם זה לא קבוצה, נתחיל לעדכן את ההורים\r\nif not doc.is_group:\r\n    parent_name = doc.parent_development_task\r\n\r\n    while parent_name:\r\n        parent_doc = frappe.get_doc(\"Development Task\", parent_name)\r\n\r\n        # שליפת כל הילדים הישירים של ההורה הנוכחי\r\n        child_tasks = frappe.get_all(\r\n            \"Development Task\",\r\n            filters={\"parent_development_task\": parent_name},\r\n            fields=[\"name\", \"estimated_cost\", \"actual_cost\", \"is_group\"]\r\n        )\r\n\r\n        total_estimated = 0\r\n        total_actual = 0\r\n\r\n        i = 0\r\n        while i < len(child_tasks):\r\n            child = child_tasks[i]\r\n            if child.get(\"is_group\"):\r\n                sub_tasks = frappe.get_all(\r\n                    \"Development Task\",\r\n                    filters={\"parent_development_task\": child.get(\"name\")},\r\n                    fields=[\"estimated_cost\", \"actual_cost\"]\r\n                )\r\n                j = 0\r\n                while j < len(sub_tasks):\r\n                    total_estimated = total_estimated + (sub_tasks[j].get(\"estimated_cost\") or 0)\r\n                    total_actual = total_actual + (sub_tasks[j].get(\"actual_cost\") or 0)\r\n                    j = j + 1\r\n            else:\r\n                total_estimated = total_estimated + (child.get(\"estimated_cost\") or 0)\r\n                total_actual = total_actual + (child.get(\"actual_cost\") or 0)\r\n            i = i + 1\r\n\r\n        # עדכון ההורה עם הסכומים החדשים\r\n        frappe.db.set_value(\"Development Task\", parent_name, {\r\n            \"estimated_cost\": total_estimated,\r\n            \"actual_cost\": total_actual\r\n        })\r\n\r\n        # המשך ללמעלה בהיררכיה\r\n        parent_name = parent_doc.parent_development_task\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-30 09:33:20.235761",
  "module": "Development",
  "name": "Assign lot",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Arrangement File",
  "script": "if doc.assigned_lot:\r\n    frappe.db.set_value(\"Lot\", doc.assigned_lot, \"assigned_arrangement_file\", doc.name)\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-30 10:04:42.221844",
  "module": "Development",
  "name": "Assign Related Development Project in Lot from",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Development Project",
  "script": "lots = frappe.get_all(\"Lot\", filters={\"plan\": doc.plan}, fields=[\"name\"])\r\nfor lot in lots:\r\n    frappe.db.set_value(\"Lot\", lot.name, \"related_project\", doc.name)\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-30 17:25:59.664646",
  "module": "Development",
  "name": "Validate Root Task",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Development Project",
  "script": "if doc.root_task:\r\n    frappe.db.set_value(\"Development Task\", doc.root_task, \"development_project\", doc.name)\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-30 17:25:59.679508",
  "module": "Development",
  "name": "Validate Root Task In Development Task",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Development Task",
  "script": "# נוודא שזו משימת Root (אין parent וגם יש קישור לפרויקט)\r\nif not doc.parent_development_task and doc.development_project:\r\n    frappe.db.set_value(\"Development Project\", doc.development_project, \"root_task\", doc.name)\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-24 11:34:37.243994",
  "module": "Development",
  "name": "Create Root Task for each Development Project",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Development Project",
  "script": "# יצירת Root Task אוטומטית בעת יצירת Development Project\r\n\r\nroot_task = frappe.new_doc(\"Development Task\")\r\nroot_task.task_name = f\"משימות לפרויקט {doc.project_name or doc.name}\"\r\nroot_task.is_group = 1\r\nroot_task.development_project = doc.name\r\nroot_task.insert(ignore_permissions=True)\r\n\r\n# עדכון קישור בפרויקט\r\nfrappe.db.set_value(\"Development Project\", doc.name, \"root_task\", root_task.name)\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-30 18:03:35.329675",
  "module": "Development",
  "name": "Update children Development Project field in Development Task",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Development Task",
  "script": "# ודא שלכל משימה בעץ יש את ה-development_project של ה-root\r\n\r\ndef update_children_project(doc):\r\n    if doc.development_project:\r\n        children = frappe.get_all(\"Development Task\", filters={\"parent_development_task\": doc.name}, fields=[\"name\"])\r\n        for child in children:\r\n            frappe.db.set_value(\"Development Task\", child.name, \"development_project\", doc.development_project)\r\n\r\nupdate_children_project(doc)\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-30 18:12:43.756508",
  "module": "Development",
  "name": "Children task inherit from parent",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Development Task",
  "script": "# אם המשימה הנוכחית היא תת-משימה ויש לה אב, נוריש ממנה את הפרויקט\r\n\r\nif doc.parent_development_task and not doc.development_project:\r\n    parent_project = frappe.db.get_value(\"Development Task\", doc.parent_development_task, \"development_project\")\r\n    if parent_project:\r\n        doc.development_project = parent_project\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-25 14:36:30.859419",
  "module": "Development",
  "name": "Update Current Status from Latest Committee Decision",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Project Approval Committee",
  "script": "# Update Current Status from Latest Committee Decision\n\nif doc.meeting_history:\n    latest_meeting = sorted(doc.meeting_history, key=lambda m: m.meeting_date or frappe.utils.nowdate())[-1]\n    doc.current_status = latest_meeting.decision\nelse:\n    doc.current_status = None\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-26 18:07:17.560750",
  "module": "Development",
  "name": "Calculate Total Costs from Root Tasks",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Development Project",
  "script": "# Calculate Total Estimated & Actual Cost from linked Root Tasks\n\nroot_tasks = frappe.get_all(\n    \"Development Task\",\n    filters={\n        \"development_project\": doc.name,\n        \"parent_development_task\": [\"is\", \"not set\"]\n    },\n    fields=[\"estimated_cost\", \"actual_cost\"]\n)\n\ndoc.total_estimated_cost = sum(task.estimated_cost or 0 for task in root_tasks)\ndoc.total_actual_cost = sum(task.actual_cost or 0 for task in root_tasks)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-29 10:54:40.017343",
  "module": "Arrangement",
  "name": "Set Evacuee full name",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Evacuee",
  "script": "if doc.first_name and doc.last_name:\r\n    doc.full_name = f\"{doc.first_name} {doc.last_name}\"\r\nelse:\r\n    doc.full_name = (doc.first_name or '') + (doc.last_name or '')\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-29 11:10:06.187112",
  "module": "Arrangement",
  "name": "Validate Arrangement File Fields",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Arrangement File",
  "script": "if doc.evacuee_a and doc.evacuee_b and doc.evacuee_a == doc.evacuee_b:\r\n    frappe.throw(\"Evacuee A and Evacuee B cannot be the same person.\")\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-29 14:54:10.716382",
  "module": "rb",
  "name": "Validate Evacuee",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Evacuee",
  "script": "# שלבים:\r\n# - הסרת תווים שאינם ספרות\r\n# - בדיקה אם יש 10 ספרות\r\n# - עיצוב לפורמט xxx-xxx-xxxx\r\n\r\nif not doc.phone:\r\n    frappe.throw(\"יש להזין מספר טלפון\")\r\n\r\n# הסר תווים לא מספריים (רק ספרות נשארות)\r\ndigits = ''.join([c for c in doc.phone if c.isdigit()])\r\n\r\nif len(digits) != 10:\r\n    frappe.throw(\"מספר הטלפון חייב להכיל 10 ספרות בדיוק\")\r\n\r\n# הפורמט הסופי: xxx-xxx-xxxx\r\ndoc.phone = f\"{digits[:3]}-{digits[3:6]}-{digits[6:]}\"\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-24 11:34:32.652580",
  "module": "Development",
  "name": "Auto Calculate Development Project Fields",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Development Project",
  "script": "# חישוב אוטומטי של עלות למגרש\nif doc.estimated_total_cost and doc.residential_lots:\n    doc.cost_per_lot = doc.estimated_total_cost / doc.residential_lots\nelse:\n    doc.cost_per_lot = 0\n\n# חישוב סך עלויות מפירוט עלויות\ntotal_breakdown = (doc.infrastructure_cost or 0) + (doc.utilities_cost or 0) + (doc.roads_cost or 0) + (doc.other_costs or 0)\nif total_breakdown > 0:\n    doc.estimated_total_cost = total_breakdown",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-24 22:57:55.965526",
  "module": "Planning",
  "name": "Update Plan Lots Summary on Lot Save",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Lot",
  "script": "def calculate_plan_lots_summary(plan_name):\n    \"\"\"Calculate and update lots summary for a plan\"\"\"\n    if not plan_name:\n        return\n    \n    # Get all lots for this plan\n    lots = frappe.db.sql(\"\"\"\n        SELECT \n            COUNT(*) as total_lots,\n            SUM(IFNULL(area_sqm, 0)) as total_area_sqm,\n            COUNT(CASE WHEN IFNULL(area_sqm, 0) > 0 THEN 1 END) as residential_lots,\n            SUM(CASE WHEN IFNULL(area_sqm, 0) > 0 THEN area_sqm ELSE 0 END) as residential_area_sqm\n        FROM `tabLot`\n        WHERE plan = %s\n    \"\"\", [plan_name], as_dict=True)\n    \n    if lots:\n        lot_data = lots[0]\n        # Update the plan document\n        frappe.db.set_value('Plan', plan_name, {\n            'total_lots': lot_data.get('total_lots', 0),\n            'total_area_sqm': lot_data.get('total_area_sqm', 0),\n            'residential_lots': lot_data.get('residential_lots', 0),\n            'residential_area_sqm': lot_data.get('residential_area_sqm', 0)\n        })\n\n# Main execution\nif doc.plan:\n    calculate_plan_lots_summary(doc.plan)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Delete",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-24 22:50:49.653117",
  "module": null,
  "name": "Update Plan Lots Summary on Lot Delete",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Lot",
  "script": "def calculate_plan_lots_summary(plan_name):\n    \"\"\"Calculate and update lots summary for a plan\"\"\"\n    if not plan_name:\n        return\n    \n    # Get all lots for this plan\n    lots = frappe.db.sql(\"\"\"\n        SELECT \n            COUNT(*) as total_lots,\n            SUM(IFNULL(area_sqm, 0)) as total_area_sqm,\n            COUNT(CASE WHEN IFNULL(area_sqm, 0) > 0 THEN 1 END) as residential_lots,\n            SUM(CASE WHEN IFNULL(area_sqm, 0) > 0 THEN area_sqm ELSE 0 END) as residential_area_sqm\n        FROM `tabLot`\n        WHERE plan = %s\n    \"\"\", [plan_name], as_dict=True)\n    \n    if lots:\n        lot_data = lots[0]\n        # Update the plan document\n        frappe.db.set_value('Plan', plan_name, {\n            'total_lots': lot_data.get('total_lots', 0),\n            'total_area_sqm': lot_data.get('total_area_sqm', 0),\n            'residential_lots': lot_data.get('residential_lots', 0),\n            'residential_area_sqm': lot_data.get('residential_area_sqm', 0)\n        })\n    else:\n        # No lots left, reset to 0\n        frappe.db.set_value('Plan', plan_name, {\n            'total_lots': 0,\n            'total_area_sqm': 0,\n            'residential_lots': 0,\n            'residential_area_sqm': 0\n        })\n\n# Main execution - use the plan from the deleted document\nif hasattr(doc, 'plan') and doc.plan:\n    calculate_plan_lots_summary(doc.plan)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "update_all_plans_lots_summary",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-24 22:57:36.057265",
  "module": "Planning",
  "name": "Initial Plan Lots Summary Update",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "plans = frappe.get_all('Plan', fields=['name'])\nupdated_count = 0\n\nfor plan in plans:\n    plan_name = plan['name']\n    \n    # Get all lots for this plan\n    lots = frappe.db.sql(\"\"\"\n        SELECT \n            COUNT(*) as total_lots,\n            SUM(IFNULL(area_sqm, 0)) as total_area_sqm,\n            COUNT(CASE WHEN IFNULL(area_sqm, 0) > 0 THEN 1 END) as residential_lots,\n            SUM(CASE WHEN IFNULL(area_sqm, 0) > 0 THEN area_sqm ELSE 0 END) as residential_area_sqm\n        FROM `tabLot`\n        WHERE plan = %s\n    \"\"\", [plan_name], as_dict=True)\n    \n    if lots:\n        lot_data = lots[0]\n        # Update the plan document\n        frappe.db.set_value('Plan', plan_name, {\n            'total_lots': lot_data.get('total_lots', 0),\n            'total_area_sqm': lot_data.get('total_area_sqm', 0),\n            'residential_lots': lot_data.get('residential_lots', 0),\n            'residential_area_sqm': lot_data.get('residential_area_sqm', 0)\n        })\n        updated_count = updated_count + 1\n\nfrappe.db.commit()\nmessage = 'Successfully updated lots summary for ' + str(updated_count) + ' plans'\nfrappe.response['message'] = message",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "update_plan_lots_summary",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-24 22:57:36.046229",
  "module": "Planning",
  "name": "Update Plan Summary API",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "# Get parameter from request\nplan_name = frappe.form_dict.get('plan_name')\n\nif not plan_name:\n    frappe.throw(\"Plan name is required\")\n\n# Get all lots for this plan\nlots_data = frappe.db.sql(\"\"\"\n    SELECT \n        COUNT(*) as total_lots,\n        SUM(IFNULL(area_sqm, 0)) as total_area_sqm,\n        COUNT(CASE WHEN IFNULL(area_sqm, 0) > 0 THEN 1 END) as residential_lots,\n        SUM(CASE WHEN IFNULL(area_sqm, 0) > 0 THEN area_sqm ELSE 0 END) as residential_area_sqm\n    FROM `tabLot`\n    WHERE plan = %s\n\"\"\", [plan_name], as_dict=True)\n\nif lots_data:\n    data = lots_data[0]\n    \n    # Update the plan document\n    frappe.db.set_value('Plan', plan_name, {\n        'total_lots': data.get('total_lots', 0),\n        'total_area_sqm': data.get('total_area_sqm', 0),\n        'residential_lots': data.get('residential_lots', 0),\n        'residential_area_sqm': data.get('residential_area_sqm', 0)\n    })\n    frappe.db.commit()\n    \n    result = {\n        'success': True,\n        'data': data,\n        'message': 'Plan lots summary updated successfully'\n    }\nelse:\n    result = {\n        'success': False,\n        'message': 'No lots data found'\n    }\n\nfrappe.response['message'] = result",
  "script_type": "API"
 }
]